datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole         @default(USER)
  accounts       Account[]
  Inventory      Inventory[]
  Collects       Collect[]
  CollectDetails CollectDetails[]
}

model Account {
  Id            String  @id @default(cuid())
  userId        String
  type          String
  refresh_Token String? @db.Text
  access_Token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Inventory {
  inventoryId   String   @id @default(cuid())
  userId        String
  inventoryDate DateTime
  description   String

  user             User               @relation(fields: [userId], references: [id])
  inventoryDetails InventoryDetails[]
}

model InventoryDetails {
  detailsId       String   @id @default(cuid())
  inventoryId     String
  productId       String
  quantityChanged Int
  inventoryDate   DateTime
  comment         String

  inventory Inventory @relation(fields: [inventoryId], references: [inventoryId])
  product   Products  @relation(fields: [productId], references: [id])
}

model Products {
  id       String @id @unique @default(cuid())
  typeId   String
  name     String @unique
  quantity Int

  type             ProductType        @relation(fields: [typeId], references: [typeId])
  InventoryDetails InventoryDetails[]
  CollectDetails   CollectDetails[]
}

model ProductType {
  typeId   String     @id @default(cuid())
  typeName String
  products Products[]
}

model Collect {
  collectionId   String   @id @default(cuid())
  userId         String
  collectionName String
  collectionDate DateTime
  open           Boolean

  collectDetails CollectDetails[]

  user User @relation(fields: [userId], references: [id])
}

model CollectDetails {
  collectionDetailId String @id @default(cuid())
  collectionId       String
  productId          String
  userId             String
  quantityCollected  Int

  collect Collect  @relation(fields: [collectionId], references: [collectionId])
  product Products @relation(fields: [productId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}
